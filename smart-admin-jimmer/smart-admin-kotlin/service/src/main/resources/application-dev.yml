## The profile with cache requires mysql, redis, zookeeper, kafka and debezium.
## You can run `<jimmer_home>/example/env-with-cache/debezium/install.sh` to install them in docker

spring:

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgresql:5432/postgres
    username: root
    password: root
  data:
    redis:

      database: 0
      host: redis
      port: 6379
      timeout: 10s
      lettuce:
        pool:
          max-active: 5
          min-idle: 1
          max-idle: 3
          max-wait: 30000ms

  # 邮件，置以SSL的方式发送, 这个需要使用这种方式并且端口是465
  mail:
    host: smtp.qq.com
    port: 465
    username: 990263438@qq.com
    password: gpyfzuvddryvbddc
    #默认的邮件编码为UTF-8
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: true
            socketFactory:
              class: com.sun.mail.util.MailSSLSocketFactory
              fallback: false
        debug: false

  # json序列化相关配置
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: always
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  # 缓存实现类型
  cache:
    type: caffeine

jimmer:
  dialect: org.babyfish.jimmer.sql.dialect.PostgresDialect

# 项目配置: 名称、日志目录
project:
  default-tenant: "1"
  name: sa-admin
  log-directory: ${localPath:/home}/logs/smart_admin_v3/${project.name}/${spring.profiles.active}

# 文件上传 配置
file:
  storage:
    mode: local
    local:
      upload-path: /home/smart_admin_v3/upload/   #文件上传目录
      url-prefix:
    cloud:
      region: oss-cn-hangzhou
      endpoint: oss-cn-hangzhou.aliyuncs.com
      bucket-name: 1024lab-smart-admin
      access-key:
      secret-key:
      url-prefix: https://${file.storage.cloud.bucket-name}.${file.storage.cloud.endpoint}/
      private-url-expire-seconds: 3600


# sa-token 配置
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: x-access-token
  # token 有效期（单位：秒） 默认30天（2592000秒），-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）(jwt模式下恒false)
  is-share: false
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）(jwt模式下无用)
  token-style: simple-uuid
  # 是否打开自动续签 （如果此值为true，框架会在每次直接或间接调用 getLoginId() 时进行一次过期检查与续签操作）
  auto-renew: true
  # 是否输出操作日志
  is-log: true
  # 日志等级（trace、debug、info、warn、error、fatal）
  log-level: debug
  # 启动时的字符画打印
  is-print: false
  # 是否从cookie读取token
  is-read-cookie: false


# 心跳配置
heart-beat:
  interval-seconds: 300

# 热加载配置
reload:
  interval-seconds: 300

# SmartJob 定时任务配置(不需要可以直接删除以下配置，详细文档请看：https://www.xxxxxx.com)
smart:
  job:
    enabled: true
    # 任务初始化延迟 默认30秒 可选
    init-delay: 10
    # 定时任务执行线程池数量 默认2 可选
    core-pool-size: 2
    # 数据库配置检测-开关 默认开启 可选（作用是固定间隔读取数据库配置更新任务，关闭后只能重启服务或通过接口修改定时任务，建议开启）
    db-refresh-enabled: true
    # 数据库配置检测-执行间隔 默认120秒 可选
    db-refresh-interval: 60