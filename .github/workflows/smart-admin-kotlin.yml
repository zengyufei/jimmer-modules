# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Build smart-admin-kotlin

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - 'smart-admin-jimmer/smart-admin-kotlin/**'
      - '!.github/workflows/**'
  pull_request:
    branches:
      - main

# 声明需要上传权限
permissions:
  contents: write
  actions: read
  
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        gradle-version: '8.9'

    - name: Build with Gradle Wrapper
      run: |
        cd ./smart-admin-jimmer/smart-admin-kotlin
        gradle build -x test
              
    - name: Get release asset ID
      id: get_asset_id
      run: |
        TAG_NAME=release
        ASSET_NAME="smart-admin-kotlin.jar"
        ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | \
          jq -r ".assets[] | select(.name == \"$ASSET_NAME\") | .id")
        
        echo "ASSET_ID=$ASSET_ID" >> $GITHUB_ENV
        echo "Found asset ID: $ASSET_ID"

    - name: Delete old release asset
      if: env.ASSET_ID != ''
      run: |
        echo "Deleting asset with ID: $ASSET_ID"
        curl -X DELETE \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
          
    - name: Upload to Release
      if: success()
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./smart-admin-jimmer/smart-admin-kotlin/service/build/libs/smart-admin-kotlin.jar
        asset_name: smart-admin-kotlin.jar
        tag: release
